#pragma once

/* THIS FILE IS AUTOGENERATED BY gen/gen_component_impl.py; DO NOT HAND-MODIFY */

#include <libconfig.h>
#include <memory>

#include "component_manager.h"

struct sensor_comparator_component_manager : component_manager {
    struct instance_data {
        c_entity *entity;
        float *compare_result;
        float *compare_epsilon;
    } instance_pool;

    void create_component_instance_data(unsigned count) override;
    void destroy_instance(instance i) override;
    void entity(c_entity e) override;

    void register_stub_generator();

    instance_data get_instance_data(c_entity e) {
        instance_data d{};
        auto inst = lookup(e);

        d.entity = instance_pool.entity + inst.index;
        d.compare_result = instance_pool.compare_result + inst.index;
        d.compare_epsilon = instance_pool.compare_epsilon + inst.index;

        return d;
    }

    static sensor_comparator_component_manager* get_manager() {
        return dynamic_cast<sensor_comparator_component_manager*>(component_managers["sensor_comparator"].get());
    }
};

struct sensor_comparator_component_stub : component_stub {
    sensor_comparator_component_stub() : component_stub("sensor_comparator") {}

    float compare_epsilon{};

    void
    assign_component_to_entity(c_entity entity) {
        std::shared_ptr<component_manager> m = std::move(component_managers[name]);
        std::shared_ptr<sensor_comparator_component_manager> man = std::dynamic_pointer_cast<sensor_comparator_component_manager>(m);

        man->assign_entity(entity);
        auto data = man->get_instance_data(entity);        

        *data.compare_result = 0;

        *data.compare_epsilon = 0;

        *data.compare_epsilon = compare_epsilon;
  };
};
