#pragma once

/* THIS FILE IS AUTOGENERATED BY gen/gen_component_impl.py; DO NOT HAND-MODIFY */

#include <libconfig.h>
#include <memory>

#include "component_manager.h"
#include "component_system_manager.h"

extern component12_system_manager component_system_man;

struct type_component_manager : component_manager {
    struct instance_data {
        c_entity *entity;
        unsigned *type;
        char const * *name;
    } instance_pool;

    void create_component_instance_data(unsigned count) override;
    void destroy_instance(instance i) override;
    void entity(c_entity e) override;

    instance_data get_instance_data(c_entity e) {
        instance_data d{};
        auto inst = lookup(e);

        d.entity = instance_pool.entity + inst.index;
        d.type = instance_pool.type + inst.index;
        d.name = instance_pool.name + inst.index;

        return d;
    }
};

struct type_component_stub : component_stub {
    type_component_stub() : component_stub("type") {}

    std::string name{};

    void
    assign_component_to_entity(c_entity entity) override {
        auto &man = component_system_man.managers.type_component_man;

        man.assign_entity(entity);
        auto data = man.get_instance_data(entity);        

        *data.type = 0;

        *data.name = "";

        *data.name = name.c_str();
  };
};
