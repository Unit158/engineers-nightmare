#pragma once

/* THIS FILE IS AUTOGENERATED BY gen/gen_component_impl.py; DO NOT HAND-MODIFY */

#include <libconfig.h>
#include <memory>

#include "component_manager.h"

struct power_component_manager : component_manager {
    struct instance_data {
        c_entity *entity;
        float *required_power;
        bool *powered;
        float *max_required_power;
    } instance_pool;

    void create_component_instance_data(unsigned count) override;
    void destroy_instance(instance i) override;
    void entity(c_entity e) override;

    void register_stub_generator();

    instance_data get_instance_data(c_entity e) {
        instance_data d{};
        auto inst = lookup(e);

        d.entity = instance_pool.entity + inst.index;
        d.required_power = instance_pool.required_power + inst.index;
        d.powered = instance_pool.powered + inst.index;
        d.max_required_power = instance_pool.max_required_power + inst.index;

        return d;
    }

    static power_component_manager* get_manager() {
        return dynamic_cast<power_component_manager*>(component_managers["power"].get());
    }
};

struct power_component_stub : component_stub {
    power_component_stub() : component_stub("power") {}

    float required_power{};

    float max_required_power{};

    void
    assign_component_to_entity(c_entity entity) {
        std::shared_ptr<component_manager> m = std::move(component_managers[name]);
        std::shared_ptr<power_component_manager> man = std::dynamic_pointer_cast<power_component_manager>(m);

        man->assign_entity(entity);
        auto data = man->get_instance_data(entity);        

        *data.required_power = 0;

        *data.powered = false;

        *data.max_required_power = 0;

        *data.required_power = required_power;

        *data.max_required_power = max_required_power;
  };
};
